Задание 1
В целом подход правильный, но задание выполнено не до конца.
Нужно написать такую шаблонную функцию, чтобы возможно было возводить в квадрат и вектор:
```

std::vector<int> b = { -1, 4, 8 };
std::vector<int> y = my_sqrt(b);
//В b должны оставаться числа -1, 4 и 8. А в переменной y должны быть числа 1, 16 и 64
```
Нужно доделать задание.

Задание 2
В целом подход правильный, но есть замечания:
1. В операторах operator[] нужно делать проверку на выход за пределы массива, и на отрицательный индекс. Если проверка не пройдена, нужно выбрасывать исключение.
2. Как и в домашнем задании RAII, нужно либо запретить, либо определить оператор присваивания и конструктор копирования для класса и table. Иначе программист может случайно скопировать объект класса, и потом при их удалении произойдет двойное освобождение памяти, и программа упадет.
Пример кода который приводит к падению:
```
{
table<int> t1(2, 3);
table<int> t2(2, 3);

    t1 = t2;
} // Программа упадет здесь

Нужно исправить замечания.
3. На строке 65 вы написали такой код:

T& table operator=(int _r, int _c)
{
M[r][c] = 0;
}
``
Здесь вы написали сначала что метод возвращаетT&а потом зачем-то написали table. Метод не может возвращать два типа. он должен возвращать что-то одно.
4. Операторoperator []` всегда принимает только один аргумент. Вы написали его с двумя аргументами, такой код работать не будет.
Нужно исправить замечания.

Чтобы добавить проверку и по второму индексу, можно возвращать не напрямую указатель T* а класс-обертку вокруг этого указателя. Класс будет делать единственную вещь - будет в операторе [] проверять выход за пределы индекса. Но это необязательное исправление, я зачту выполнение задание и без него.

